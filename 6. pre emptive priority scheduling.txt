#include<stdio.h>
struct Process {
    int id;            // Process ID
    int priority;      // Priority of the process
    int burst_time;    // Burst time of the process
    int arrival_time;  // Arrival time of the process
};
void priorityScheduling(struct Process processes[], int n) {
    int time = 0;  // Current time
    int completed = 0;  // Number of completed processes

    while (completed < n) {
        int highest_priority = -1;
        int selected_process = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].priority > highest_priority && processes[i].burst_time > 0) {
                highest_priority = processes[i].priority;
                selected_process = i;
            }
        }
        if (selected_process != -1) {
            printf("Time %d: Process %d\n", time, processes[selected_process].id);
            processes[selected_process].burst_time--;
            time++;
            if (processes[selected_process].burst_time == 0) {
                processes[selected_process].completion_time = time;
                completed++;
            }
        } else {
          
            printf("Time %d: Idle\n", time);
            time++;
        }
    }
}

int main() {
    struct Process processes[] = {
        {1, 2, 5, 0},
        {2, 1, 3, 2},
        {3, 4, 8, 3},
        {4, 3, 6, 5}
    };

    int n = sizeof(processes) / sizeof(processes[0]);
    priorityScheduling(processes, n);
    printf("\nCompletion Times:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: %d\n", processes[i].id, processes[i].completion_time);
    }

    return 0;
}
